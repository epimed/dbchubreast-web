package dbchubreast_web.entity;
// Generated 21 dï¿½c. 2016 10:07:28 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

/**
 * ChuPhaseTumeur generated by hbm2java
 */
@Entity
@Table(name = "chu_phase_tumeur", schema = "db_chu_breast")
public class ChuPhaseTumeur implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer idPhase;
	private ChuPerformanceStatus chuPerformanceStatus;
	private ChuTumeur chuTumeur;
	private ChuTypePhase chuTypePhase;
	private Integer numeroRechute;
	private Date dateDiagnostic;
	private String natureDiagnostic;
	private String profondeur;
	private Boolean locale;
	private Boolean metastases;
	private Boolean nodules;
	private String remarque;
	private List<ChuTnm> chuTnms = new ArrayList<ChuTnm>(0);
	private List<ChuPrelevement> chuPrelevements = new ArrayList<ChuPrelevement>(0);
	private List<ChuTraitement> chuTraitements = new ArrayList<ChuTraitement>(0);
	private List<ChuMetastase> chuMetastases = new ArrayList<ChuMetastase>(0);

	public ChuPhaseTumeur() {
	}

	public ChuPhaseTumeur(Integer idPhase, ChuTumeur chuTumeur, ChuTypePhase chuTypePhase, Date dateDiagnostic) {
		this.idPhase = idPhase;
		this.chuTumeur = chuTumeur;
		this.chuTypePhase = chuTypePhase;
		this.dateDiagnostic = dateDiagnostic;
	}

	public ChuPhaseTumeur(Integer idPhase, ChuPerformanceStatus chuPerformanceStatus, ChuTumeur chuTumeur,
			ChuTypePhase chuTypePhase, Integer numeroRechute, Date dateDiagnostic, String natureDiagnostic,
			String profondeur, Boolean locale, Boolean metastases, Boolean nodules, String remarque,
			List<ChuTnm> chuTnms, List<ChuPrelevement> chuPrelevements, List<ChuTraitement> chuTraitements,
			List<ChuMetastase> chuMetastases) {
		super();
		this.idPhase = idPhase;
		this.chuPerformanceStatus = chuPerformanceStatus;
		this.chuTumeur = chuTumeur;
		this.chuTypePhase = chuTypePhase;
		this.numeroRechute = numeroRechute;
		this.dateDiagnostic = dateDiagnostic;
		this.natureDiagnostic = natureDiagnostic;
		this.profondeur = profondeur;
		this.locale = locale;
		this.metastases = metastases;
		this.nodules = nodules;
		this.remarque = remarque;
		this.chuTnms = chuTnms;
		this.chuPrelevements = chuPrelevements;
		this.chuTraitements = chuTraitements;
		this.chuMetastases = chuMetastases;
	}

	@Id
	@GeneratedValue(generator="increment")
	@GenericGenerator(name="increment", strategy = "increment")
	@Column(name = "id_phase", unique = true, nullable = false)
	public Integer getIdPhase() {
		return this.idPhase;
	}

	public void setIdPhase(Integer idPhase) {
		this.idPhase = idPhase;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_ps")
	public ChuPerformanceStatus getChuPerformanceStatus() {
		return this.chuPerformanceStatus;
	}

	public void setChuPerformanceStatus(ChuPerformanceStatus chuPerformanceStatus) {
		this.chuPerformanceStatus = chuPerformanceStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_tumeur", nullable = false)
	public ChuTumeur getChuTumeur() {
		return this.chuTumeur;
	}

	public void setChuTumeur(ChuTumeur chuTumeur) {
		this.chuTumeur = chuTumeur;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_type_phase", nullable = false)
	public ChuTypePhase getChuTypePhase() {
		return this.chuTypePhase;
	}

	public void setChuTypePhase(ChuTypePhase chuTypePhase) {
		this.chuTypePhase = chuTypePhase;
	}

	@Column(name = "numero_rechute")
	public Integer getNumeroRechute() {
		return this.numeroRechute;
	}

	public void setNumeroRechute(Integer numeroRechute) {
		this.numeroRechute = numeroRechute;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_diagnostic", length = 13)
	public Date getDateDiagnostic() {
		return this.dateDiagnostic;
	}

	public void setDateDiagnostic(Date dateDiagnostic) {
		this.dateDiagnostic = dateDiagnostic;
	}

	@Column(name = "nature_diagnostic", length = 100)
	public String getNatureDiagnostic() {
		return this.natureDiagnostic;
	}

	public void setNatureDiagnostic(String natureDiagnostic) {
		this.natureDiagnostic = natureDiagnostic;
	}

	@Column(name = "profondeur", length = 50)
	public String getProfondeur() {
		return this.profondeur;
	}

	public void setProfondeur(String profondeur) {
		this.profondeur = profondeur;
	}

	@Column(name = "locale")
	public Boolean getLocale() {
		return this.locale;
	}

	public void setLocale(Boolean locale) {
		this.locale = locale;
	}

	@Column(name = "metastases")
	public Boolean getMetastases() {
		return this.metastases;
	}

	public void setMetastases(Boolean metastases) {
		this.metastases = metastases;
	}

	@Column(name = "nodules")
	public Boolean getNodules() {
		return this.nodules;
	}

	public void setNodules(Boolean nodules) {
		this.nodules = nodules;
	}
	
	@Column(name = "remarque")
	public String getRemarque() {
		return this.remarque;
	}

	public void setRemarque(String remarque) {
		this.remarque = remarque;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "chuPhaseTumeur")
	public List<ChuTnm> getChuTnms() {
		return this.chuTnms;
	}

	public void setChuTnms(List<ChuTnm> chuTnms) {
		this.chuTnms = chuTnms;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "chuPhaseTumeur")
	public List<ChuPrelevement> getChuPrelevements() {
		return this.chuPrelevements;
	}

	public void setChuPrelevements(List<ChuPrelevement> chuPrelevements) {
		this.chuPrelevements = chuPrelevements;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "chuPhaseTumeur")
	public List<ChuTraitement> getChuTraitements() {
		return this.chuTraitements;
	}

	public void setChuTraitements(List<ChuTraitement> chuTraitements) {
		this.chuTraitements = chuTraitements;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "chu_phase_metastase", schema = "db_chu_breast", joinColumns = {
			@JoinColumn(name = "id_phase", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "id_metastase", nullable = false, updatable = false) })
	public List<ChuMetastase> getChuMetastases() {
		return this.chuMetastases;
	}

	public void setChuMetastases(List<ChuMetastase> chuMetastases) {
		this.chuMetastases = chuMetastases;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((idPhase == null) ? 0 : idPhase.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ChuPhaseTumeur other = (ChuPhaseTumeur) obj;
		if (idPhase == null) {
			if (other.idPhase != null)
				return false;
		} else if (!idPhase.equals(other.idPhase))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "ChuPhaseTumeur [idPhase=" + idPhase + ", numeroRechute=" + numeroRechute + ", dateDiagnostic="
				+ dateDiagnostic + ", natureDiagnostic=" + natureDiagnostic + ", profondeur=" + profondeur + ", locale="
				+ locale + ", metastases=" + metastases + ", nodules=" + nodules + ", remarque=" + remarque + "]";
	}



}
